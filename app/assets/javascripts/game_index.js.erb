


var game = new Phaser.Game(640, 360, Phaser.AUTO)
// Click counter
var counter = 0;

var GameState = {

	preload: function() { 
		// Preload assets	
		this.load.image('salt',"<%= asset_path('Salt_Unclicked.png') %>");
		this.load.image('forest',"<%= asset_path('forest.png') %>");
        this.load.image('saveButton',"<%= asset_path('saveIcon.png') %>");
	},

	create: function() {
		
		// Background image initialization
        var forestBackground = game.add.sprite(0, 0, 'forest');


		// Salt image initialize
        var saltSprite = game.add.sprite(320, 180, 'salt');

        // Save button
        var saveButton = game.add.button(550, 50, 'saveButton', saveButtonClick, this, 2, 1, 0);

        // Point of modification of the images
        saltSprite.anchor.setTo(0.5, 0.5);
        forestBackground.anchor.setTo(0.5, 0.5);
        saveButton.anchor.setTo(0.5,0.5);

        // Scale of the images
        saltSprite.scale.setTo(0.5,0.5);
        forestBackground.scale.setTo(2, 1.5);
        saveButton.scale.setTo(0.15,0.15);

        // Input text initializer
        clickText = game.add.text(250, 16, '', { fill: '#ffffff' });

        //  Enables all kind of input actions on this image (click, etc)
    	saltSprite.inputEnabled = true;

        saltSprite.input.pixelPerfectOver = true;
        saltSprite.input.pixelPerfectClick = true;

        saltSprite.input.useHandCursor = true;

       	// User inputs
        saltSprite.events.onInputDown.add(saltClickDown, this);
        saltSprite.events.onInputUp.add(saltClickUp, this);

        // Player stats
        this.player = {
    		clickDmg: 1,
    		salt: gon.user_salt
		};

		// Player salt text
		this.playerSaltText = this.add.text(30, 30, 'Sal: ' + this.player.salt, {
    		font: '24px Arial Black',
    		fill: '#fff',
    		strokeThickness: 4
		});

		// Damage text initialization and animation
		this.dmgTextPool = this.add.group();
		var dmgText;
		for (var d=0; d<50; d++) {
    		dmgText = this.add.text(0, 0, '1', {
        		font: '24px Arial Black',
        		fill: '#fff',
        		strokeThickness: 4
    		});
    		// start out not existing, so we don't draw it yet
    		dmgText.exists = false;
    		dmgText.tween = game.add.tween(dmgText)
        		.to({
            		alpha: 0,
            		y: this.game.rnd.integerInRange(50, 260),
            		x: this.game.rnd.integerInRange(200, 440)
        		}, 1000, Phaser.Easing.Cubic.Out);
		
    		dmgText.tween.onComplete.add(function(text, tween) {
        		text.kill();
    		});
    		this.dmgTextPool.add(dmgText);
		}
        
        // Timer
	 	// game.time.events.loop(Phaser.Timer.SECOND * 2, saltClickDownAndUp, this, saltSprite);

	},

	update: function() {

	}

};

// On save button click
function saveButtonClick () {
    // Save user stats on DB
    $.ajax({
        type: "POST",
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
        url: "/pages/set_stats",
        data: "salt=" + this.player.salt +"&current_user=" + gon.current_user,
        success: function(msg){
            alert("Game saved")
        }
    });
}

// On salt image click down
function saltClickDown (saltSprite) {

	// Show damage text
	var dmgText = this.dmgTextPool.getFirstExists(false);
	if (dmgText) {
    	dmgText.text = "+" + this.player.clickDmg;
    	dmgText.reset(game.input.mousePointer.x, game.input.mousePointer.y);
    	dmgText.alpha = 1;
    	dmgText.tween.start();
	}

	this.player.salt += 1
	var salt = this.player.salt;
	// Add salt and show on screen
    counter++;
    
    this.playerSaltText.text = 'Sal: ' + this.player.salt;
    // Scale image down
    saltSprite.scale.setTo(0.52, 0.52);

}

// On salt image click up
function saltClickUp (saltSprite) {

    // Revert image scale
    saltSprite.scale.setTo(0.5,0.5);

}

function saltClickDownAndUp (saltSprite) {

	// Add salt and show on screen
    counter++;
    this.player.salt += 1;
    this.playerSaltText.text = 'Sal: ' + this.player.salt;
    // Scale image down
    saltSprite.scale.setTo(0.52, 0.52);
    setTimeout(function(){
    	saltSprite.scale.setTo(0.5,0.5);
	}, 50);
    
}


game.state.add('GameState', GameState);

game.state.start('GameState');